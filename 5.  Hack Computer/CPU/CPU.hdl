// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

/* instruction parts:
*        C-type              A-type      
* [15]     1                   0          
* [14]     1                   v1
* [13]     1                   ...
* [12]     a
* [11]     c1
* [10]     c2     
* [9]      c3
* [8]      c4
* [7]      c5
* [6]      c6
* [5]      d1
* [4]      d2
* [3]      d3
* [2]      j1
* [1]      j2                  ...
* [0]      j3                  v15
*/
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        //A register:
        Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=instructionMuxaluOutput);
        Mux(a=true, b=instruction[5], sel=instruction[15], out=d1Mux1);
        ARegister(in=instructionMuxaluOutput, load=d1Mux1, out=Aout, out[0..14]=addressM);
        
        //Alu y input:
        Mux16(a=Aout, b=inM, sel=instruction[12], out=AmuxM);

        //Alu x input (D register):
        Mux(a=false, b=instruction[4], sel=instruction[15], out=d2Mux0);
        DRegister(in=aluOutput, load=d2Mux0, out=Dout);

        //Alu:
        ALU(x=Dout, y=AmuxM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOutput, out=outM, zr=aluZero, ng=aluNegative);
        Not(in=aluZero, out=notAluZero);
        Not(in=aluNegative, out=notAluNegative);

        Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);

        //jump logic:
        And(a=notAluNegative, b=notAluZero, out=notNgAndnotZr);
        And(a=instruction[0], b=notNgAndnotZr, out=j3AndnotNgAndnotZr);

        And(a=notAluNegative, b=aluZero, out=notNgAndzr);
        And(a=instruction[1], b=notNgAndzr, out=j2AndnotNgAndzr);

        And(a=aluNegative, b=notAluZero, out=ngAndnotZr);
        And(a=instruction[2], b=ngAndnotZr, out=j1AndngAndnotZr);

        Or(a=j3AndnotNgAndnotZr, b=j2AndnotNgAndzr, out=j3Orj2);
        Or(a=j3Orj2, b=j1AndngAndnotZr, out=j3Orj2Orj1);

        Mux(a=false, b=j3Orj2Orj1, sel=instruction[15], out=pcLoad);

        //program counter:
        PC(in=Aout, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);

}